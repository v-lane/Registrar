@page "/register/{studentId:int}"
@using Microsoft.EntityFrameworkCore
@using Registrar.Models
@inject RegistrarDbContext context;
@inject NavigationManager Nav
@rendermode InteractiveServer


@if (CurrentStudent == null)
{
    NavigateToStudents();
}
else
{
    <PageTitle>Regis√éter</PageTitle>
    <h1>Register Student</h1>

    <EditForm Model="Registration" FormName="RegistrationForm" OnValidSubmit="RegisterStudent"
              class="form m-5 bg-info bg-opacity-25 p-5">
        <CustomValidation @ref="customValidation"/>
        <h2 class="mb-4">@CurrentStudent.FirstName @CurrentStudent.LastName (ID: @StudentId)</h2>
        <div class="form-group mx-4">
            <p>The following courses are currently available for registration:</p>
            <ValidationSummary class="alert-danger p-3 list-unstyled"/>
            @foreach (var course in Registration.Courses)
            {
                <div class="form-check mb-2">
                    <InputCheckbox class="form-check-input" id="@course.Code" @bind-Value="course.IsEnrolled"/>
                    <label class="form-check-label" for="@course.Code">@course.ToString()</label>
                </div>
            }
        </div>
        <footer class="p-2">
            <Button Type="submit" ButtonStyle="btn-success" ButtonName="Register Student"></Button>
            <Button ButtonStyle="btn-danger" ButtonName="Cancel" OnClick="NavigateToStudents"></Button>
        </footer>
    </EditForm>
}


@code {
    [Parameter] public int StudentId { get; set; }

    private List<Registrar.Models.Course> courses { get; set; }

    private Registrar.Models.Student? CurrentStudent { get; set; }

    private class FormCourse
    {
        public int CourseId { get; set; }
        public string Code { get; set; }
        public string Title { get; set; }
        public int WeeklyHours { get; set; }
        public bool IsEnrolled { get; set; }

        public override string ToString()
        {
            return Code + " " + Title + " - " + WeeklyHours.ToString() + (WeeklyHours == 1 ? " hour" : " hours") +
                   " per week";
        }
    }

    private void NavigateToStudents()
    {
        Nav.NavigateTo("/");
    }

    private class RegisterModel
    {
        public List<FormCourse> Courses { get; set; } = [];
    }

    [SupplyParameterFromForm] private RegisterModel Registration { get; set; } = new();

    private CustomValidation? customValidation;


    private async Task RegisterStudent()
    {
        customValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        Console.WriteLine("register button clicked");
        int totalCourseHours = 0;
        int totalCourses = 0;

        foreach (var course in Registration.Courses)
        {
            if (course.IsEnrolled)
            {
                totalCourses += 1;
                totalCourseHours += course.WeeklyHours;
            }
        }

        // validation
        if (CurrentStudent.Type == "Full Time" && totalCourseHours > 16)
        {
            // max weekly hours == 16
            errors.Add("Enrollment", ["Full Time students can only register for a maximum of 16 hours of class."]);
            Console.WriteLine("ERROR - Full Time student can only register for max 16 hours of class");
        }
        else if (CurrentStudent.Type == "Part Time" && totalCourses > 3)
        {
            // max courses = 3
            errors.Add("Enrollment", ["Part-Time students can only register for a maximum of 3 courses."]);
            Console.WriteLine("ERROR - Part Time student can only register for max 3 courses");
        }
        else if (CurrentStudent.Type == "Coop" && (totalCourses > 2 || totalCourseHours > 4))
        {
            // max hours < 5; max courses < 3
            errors.Add("Enrollment", ["Co-op students can only register for a maximum of 2 courses and 4 hours of class."]);
            Console.WriteLine("ERROR - Coop student can only register for max 2 courses/4 hours of class");
        }

        if (errors.Any())
        {
            customValidation?.DisplayErrors((errors));
        }
        else
        {
            // check selections against database; add or delete as needed

            foreach (var course in Registration.Courses)
            {
                Console.WriteLine("in foreach");
                try
                {
                    var registration = context.Registrations.Single(r => (r.CourseId == course.CourseId) && (r.StudentId == StudentId));
                    if (!course.IsEnrolled)
                    {
                        context.Registrations.Remove(registration);
                    }
                }
                catch
                {
                    if (course.IsEnrolled)
                    {
                        var newRegistration = new Registration
                        {
                            CourseId = course.CourseId,
                            StudentId = StudentId
                        };
                        context.Registrations.Add(newRegistration);
                    }
                }
                
                // save changes
                await context.SaveChangesAsync();
                Console.WriteLine($"Student successfully registered for {totalCourses} courses, {totalCourseHours} hours weekly.");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        courses = await context.Courses.ToListAsync();
        
        try
        {
            CurrentStudent = await context.Students.SingleAsync(s => s.Id == StudentId);
        }
        catch
        {
            CurrentStudent = null;
        }

        courses.ForEach(course =>
        {
            Registration.Courses.Add(new FormCourse
            {
                CourseId = course.Id,
                Code = course.Code,
                Title = course.Title,
                WeeklyHours = course.WeeklyHours
            });
        });
        

        foreach (var registration in await context.Registrations.Where(r => r.StudentId == StudentId).ToListAsync())
        {
            Registration.Courses.Single(c => c.CourseId == registration.CourseId).IsEnrolled = true;
        }
    }

}