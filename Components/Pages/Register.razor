@page "/register/{studentId:int}"
@using Microsoft.EntityFrameworkCore
@using Registrar.Models
@inject RegistrarDbContext context;
@inject NavigationManager Nav
@rendermode InteractiveServer


@if (CurrentStudent == null)
{
    NavigateToStudents();
}
else
{
    <PageTitle>Regis√éter</PageTitle>
    <h1>Register Student</h1>

    <EditForm Model="Registration" FormName="RegistrationForm" class="form m-5 bg-info bg-opacity-25 p-5">
        <h2 class="mb-4">@CurrentStudent.FirstName @CurrentStudent.LastName (ID: @StudentId)</h2>
        <div class="form-group mx-4">
            <p>The following courses are currently available for registration:</p>
            @foreach (var course in Registration.Courses)
            {
                <div class="form-check mb-2">
                    <InputCheckbox class="form-check-input" id="@course.Code" @bind-Value="course.IsEnrolled"/>
                    <label class="form-check-label" for="@course.Code">@course.ToString()</label>
                </div>
            }
        </div>
        <footer class="p-2">
            <Button ButtonStyle="btn-success" ButtonName="Register Student"></Button>
            <Button ButtonStyle="btn-danger" ButtonName="Cancel" OnClick="NavigateToStudents"></Button>
        </footer>
    </EditForm>
}


@code {
    [Parameter] public int StudentId { get; set; }
    
    private List<Registrar.Models.Course> courses { get; set; }

    private Registrar.Models.Student? CurrentStudent { get; set; }

    private List<Registration>? Registrations { get; set; }

    private class FormCourse
    {
        public int CourseId { get; set; }
        public string Code { get; set; }
        public string Title { get; set; }
        public int WeeklyHours { get; set; }
        public bool IsEnrolled { get; set; }

        public override string ToString()
        {
            return Code + " " + Title + " - " + WeeklyHours.ToString() + (WeeklyHours == 1 ? " hour" : " hours") +
                   " per week";
        }
    }

    private void NavigateToStudents()
    {
        Nav.NavigateTo("/");
    }

    private class RegisterModel
    {
        public List<FormCourse> Courses { get; set; } = [];
    }

    [SupplyParameterFromForm] private RegisterModel Registration { get; set; } = new();

    // private CustomValidation? customValidation;

    protected override void OnInitialized()
    {
        courses = context.Courses.ToList();
        
        try
        {
            CurrentStudent = context.Students.Single(s => s.Id == StudentId);
        }
        catch
        {
            CurrentStudent = null;
        }

        foreach (var course in courses)
        {
            var newCourse = new FormCourse
            {
                CourseId = course.Id,
                Code = course.Code,
                Title = course.Title,
                WeeklyHours = course.WeeklyHours
            };
            Registration.Courses.Add(newCourse);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        foreach (var registration in await context.Registrations.Where(r => r.StudentId == StudentId).ToListAsync())
        {
            Registration.Courses.Single(c => c.CourseId == registration.CourseId).IsEnrolled = true;
        }
    }

}